CMPS-104A · Fall 2011 · Project 2 · Lexical Analyzer (Scannpage 1 of 1
$Id: asg2-scanner.mm,v 1.39 2011-10-07 20:41:15-07 - - $
/afs/cats.ucsc.edu/courses/cmps104a-wm/Assignments

1.  Overview

Augment your string table manager from the previous project by adding
to it a scanner written in flex.  Continue to use the module auxlib.
Include token creation routines in the module astree and the module
lyutils.

SYNOPSIS
     oc [-ly] [-@ flag...]  [-D string] program.oc

For this project, given an input file called program.oc, you will
generate output files called program.str (as before) and also program.
tok.  All specifications from project 1 apply to this project.  In
addition, the -l flag must turn on yy_flex_debug.

2.  Tokens in the oc language

The oc language has the following tokens:

 (a) Special symbols:
        []  (  )  [  ]  {  }  ;   ,  .   =  ==  !=  <  <=  >  >=  +  -
      *  /  %  !
     Single-character tokens may be represented by their ASCII values,
     but multiple-character tokens must be represented by a bison-
     generated set of names.  Also not the hack that [] is a single
     token, added to the language in order to eliminate a difficult
     shift/reduce conflict in project 3.

 (b) Reserved words:
        void  bool  char  int  string  struct  if  else  while  return
      false  true  null  new
     Reserved words may be just added to the scanner as patterns, but
     must precede recognition of identifiers.

 (c) Identifiers are any sequence of upper- or lower-case ASCII (not
     Unicode) letters, digits, and underscores, but may not begin with
     a digit.

 (d) Integer constants which consist of any sequence of decimal
     digits.  Octal and hexadecimal constants are not supported.

 (e) Character constants consist of a pair of single quote marks with
     a single character or escape between them:
         ('([^\\'\n]|\\[\\'"0nt])')

 (f) String constants consist of a pair of double quote marks with
     zero or more characters or escapes between them:
         (\"([^\\"\n]|\\[\\'"0nt])*\")
     Backslash, single quote, and newline may not appear in a
     character or string constants unless escaped.

 (g) Comments and white space are consistent with the C preprocessor,
     which removes comments from the input stream.  All C preprocessor
     statements are handled by cpp.

 (h) Output directives from cpp of the form
        # line "filename"
     must be scanned explicitly and used to indicate coordinates for
     printing error messages from source code.

 (i) Also recognize invalid identifiers (beginning with a digit), and
     invalid character and string constants (missing a final quote or
     a character following an escape).  Make sure the scanner report
     does not show any jamming states.

3.  The scanner

Create a file scanner.l which is used to generate yylex.c.

 (a) The only C code that should appear in the %{...%} at the start of
     your scanner should be #include and #define preprocessor
     statements.  In the first part of the scanner, use the options
     shown in Figure 1.

 (b) Retrofit your first project so that the external variable FILE
     *yyin is used to read the pipe from cpp.  Every time yylex() is
     called, it reads from that external variable.  Your main function
     will repeatedly call yylex() until it returnsa value of YYEOF.

 (c) The file misc-code/parser.y (Figure 3) contains a dummy parser
     which will not be called from this project, but which must be
     included so that the internal names of tokens can be printed.
     Copy that file and be sure that your Makefile uses it to build
     yyparse.h and yyparse.c.  The function get_yytname, given an
     integer symbol, will return a string representation of that
     symbol.

 (d) In the parser provided, the first group of token definitions will
     be used by the scanner to return codes that are not represented
     by a single character.  The second group of tokens are not
     recognized by the scanner, but are used in project 3 to edit the
     AST in order to prepare it for the later projects.

4.  A sample compiler

Look in the directory /afs/cats.ucsc.edu/courses/cmps104a-wm/Examples/
e08.expr-smc for a sample compiler for a simple language.  You will
want to copy code from that directory, especially the modules auxlib,
astree, and lyutils.  Copy the Makefile as well and edit it as
appropriate.

 (a) Module auxlib, which you are already using for project 1 has
     several useful additions to the standard C library, and macros
     for generating debugging information.

 (b) Module astree (Figure 5) has code useful for creating the
     abstract syntax tree, which you will need for this project, even
     though no AST will actually be assembled.  The scanner creates
     ASTs for each token that it finds.

 (c) As an unusual hack, struct astree_rep (Figure 6) is exposed
     instead of being secreted inside the implementation file.  This
     makes accessing its fields easier, by not requiring numerous
     accessor functions.

 (d) Module lyutils (Figure 4) contains useful declarations and
     functions for interfacing with code generated by flex and bison.
     Do not include C code (except function calls) in your scanner.
     Instead, make calls to functions in this module.

5.  Output format

Your program will produce output similar to that shown in Figure 2.

 (a) It models the information in the struct astree_rep constucted by
     the scanner, ignoring the pointers to other AST nodes, which have
     not yet been determined.  Output will be printed to a file ending
     with the suffix .tok.

 (b) Everytime a file directive is found, it is printed to the output
     token file, and also scanned to update the coordinate
     information.

 (c) Each token is also printed to the output file in neatly aligned
     columns:
      (i) Index into filename stack, incremented for each #-directive.
     (ii) The line number within the given file where the token was
          found.
     (iii) The offset in characters of the first character of the
          token within that line.
     (iv) The integer token code stored in the AST node.
      (v) The name of the token as determined by get_yytname.
     (vi) The lexical information associated with the token.

+---------------------------------------------------------------------+
|                                                                     |
|   %option 8bit                                                      |
|   %option backup                                                    |
|   %option debug                                                     |
|   %option ecs                                                       |
|   %option nodefault                                                 |
|   %option nounput                                                   |
|   %option noyywrap                                                  |
|   %option perf-report                                               |
|   %option verbose                                                   |
+---------------------------------------------------------------------+

                   Figure 1.  Options for scanner.l

+---------------------------------------------------------------------+
|                                                                     |
|   # 34 "foobar.oc"                                                  |
|      2  16.003  264  TOK_KW_RETURN   (return)                       |
|      2  16.010   61  '='             (=)                            |
|      2  20.008  258  TOK_IDENT       (hello)                        |
|      2  20.010  271  TOK_LIT_INT     (1234)                         |
|      2  25.002  123  '{'             ({)                            |
|      2  26.008  272  TOK_LIT_STRING  ("beep")                       |
+---------------------------------------------------------------------+

                      Figure 2.  Example output

+---------------------------------------------------------------------+
|                                                                     |
|     1       %{                                                      |
|     2       // Dummy parser for scanner project.                    |
|     3       %}                                                      |
|     4                                                               |
|     5       %debug                                                  |
|     6       %defines                                                |
|     7       %error-verbose                                          |
|     8       %token-table                                            |
|     9                                                               |
|    10       %token TOK_VOID TOK_BOOL TOK_CHAR TOK_INT TOK_STRING    |
|    11       %token TOK_IF TOK_ELSE TOK_WHILE TOK_RETURN TOK_STRUCT  |
|    12       %token TOK_FALSE TOK_TRUE TOK_NULL TOK_NEW TOK_ARRAY    |
|    13       %token TOK_EQ TOK_NE TOK_LT TOK_LE TOK_GT TOK_GE        |
|    14       %token TOK_IDENT TOK_INTCON TOK_CHARCON TOK_STRINGCON   |
|    15                                                               |
|    16       %token TOK_BLOCK TOK_CALL TOK_IFELSE TOK_INITDECL       |
|    17       %token TOK_POS TOK_NEG TOK_NEWARRAY TOK_TYPEID TOK_FIELD|
|    18                                                               |
|    19       %start program                                          |
|    20                                                               |
|    21       %%                                                      |
|    22                                                               |
|    23       program : program token | ;                             |
|    24       token   : '(' | ')' | '[' | ']' | '{' | '}' | ';' | ',' | '.'
|    25               | '=' | '+' | '-' | '*' | '/' | '%' | '!'       |
|    26               | TOK_VOID | TOK_BOOL | TOK_CHAR | TOK_INT | TOK_STRING
|    27               | TOK_IF | TOK_ELSE | TOK_WHILE | TOK_RETURN | TOK_STRUCT
|    28               | TOK_FALSE | TOK_TRUE | TOK_NULL | TOK_NEW | TOK_ARRAY
|    29               | TOK_EQ | TOK_NE | TOK_LT | TOK_LE | TOK_GT | TOK_GE
|    30               | TOK_IDENT | TOK_INTCON | TOK_CHARCON | TOK_STRINGCON
|    31               ;                                               |
|    32                                                               |
|    33       %%                                                      |
|    34                                                               |
|    35       const char *get_yytname (int symbol) {                  |
|    36          return yytname [YYTRANSLATE (symbol)];               |
|    37       }                                                       |
|    38                                                               |
+---------------------------------------------------------------------+

                    Figure 3.  misc-code/parser.y

+---------------------------------------------------------------------+
|                                                                     |
|     1       #ifndef __LYUTILS_H__                                   |
|     2       #define __LYUTILS_H__                                   |
|     3                                                               |
|     4       // Lex and Yacc interface utility.                      |
|     5                                                               |
|     6       #include <stdio.h>                                      |
|     7                                                               |
|     8       #include "astree.h"                                     |
|     9       #include "auxlib.h"                                     |
|    10                                                               |
|    11       #define YYEOF 0                                         |
|    12                                                               |
|    13       extern FILE *yyin;                                      |
|    14       extern astree yyparse_astree;                           |
|    15       extern int yyin_linenr;                                 |
|    16       extern char *yytext;                                    |
|    17       extern int yy_flex_debug;                               |
|    18       extern int yydebug;                                     |
|    19       extern int yyleng;                                      |
|    20                                                               |
|    21       int yylex (void);                                       |
|    22       int yyparse (void);                                     |
|    23       void yyerror (char *message);                           |
|    24       const char *get_yytname (int symbol);                   |
|    25                                                               |
|    26       char *scanner_filename (int filenr);                    |
|    27       void scanner_newfilename (char *filename);              |
|    28       void scanner_badchar (unsigned char bad);               |
|    29       void scanner_badtoken (char *lexeme);                   |
|    30       void scanner_newline (void);                            |
|    31       void scanner_setecho (bool echoflag);                   |
|    32       void scanner_useraction (void);                         |
|    33                                                               |
|    34       astree new_parseroot (void);                            |
|    35       int yylval_token (int symbol);                          |
|    36                                                               |
|    37       void scanner_include (void);                            |
|    38                                                               |
|    39       #define YYSTYPE astree                                  |
|    40       #include "yyparse.h"                                    |
|    41                                                               |
|    42       // LINTED(static unused)                                |
|    43       RCSH(LYUTILS_H,"$Id: lyutils.h,v 1.9 2011-10-06 22:05:30-07 - - $")
|    44       #endif                                                  |
+---------------------------------------------------------------------+

                    Figure 4.  expr-smc/lyutils.h

+---------------------------------------------------------------------+
|                                                                     |
|     1       #ifndef __ASTREE_H__                                    |
|     2       #define __ASTREE_H__                                    |
|     3                                                               |
|     4       #include "auxlib.h"                                     |
|     5                                                               |
|     6       typedef struct astree_rep *astree;                      |
|     7                                                               |
|     8       bool is_astree (void *object);                          |
|     9       astree new_astree (int symbol, int filenr, int linenr, int offset,
|    10                          char *lexinfo);                      |
|    11       astree adopt (astree root, /*ASTree*/ ... /*, NULL */); |
|    12       astree adopt1 (astree root, astree child);              |
|    13       astree adopt2 (astree root, astree left, astree right); |
|    14       astree adopt1sym (astree root, astree child, int symbol);
|    15       void dump_astree (FILE *outfile, astree root);          |
|    16       void yyprint (FILE *outfile, unsigned short toknum, astree yyvaluep);
|    17       void freeast (astree tree);                             |
|    18                                                               |
|    19       #define freeast2(T1,T2) { freeast (T1); freeast (T2); } |
|    20                                                               |
|    21       // LINTED(static unused)                                |
|    22       RCSH(ASTREE_H,"$Id: astree.h,v 1.6 2011-10-06 22:05:30-07 - - $")
|    23       #endif                                                  |
+---------------------------------------------------------------------+

                     Figure 5.  expr-smc/astree.h

+---------------------------------------------------------------------+
|                                                                     |
|     1       #ifndef __ASTREEREP_H__                                 |
|     2       #define __ASTREEREP_H__                                 |
|     3                                                               |
|     4       #include "astree.h"                                     |
|     5                                                               |
|     6       struct astree_rep {                                     |
|     7          char *tag;           // tag field to verify class membership
|     8          int symbol;          // token code                   |
|     9          int filenr;          // index into filename stack    |
|    10          int linenr;          // line number from source code |
|    11          int offset;          // offset of token with current line
|    12          char *lexinfo;       // pointer to lexical information
|    13          astree first;        // first child node of this node|
|    14          astree last;         // last child node of this node |
|    15          astree next;         // next younger sibling of this node
|    16       };                                                      |
|    17                                                               |
|    18       // LINTED(static unused)                                |
|    19       RCSH(ASTREEREP_H,"$Id: astree.rep.h,v 1.4 2011-10-06 22:05:30-07 - - $")
|    20       #endif                                                  |
+---------------------------------------------------------------------+

                   Figure 6.  expr-smc/astree.rep.h

