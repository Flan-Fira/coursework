head	1.5;
access;
symbols;
locks;
comment	@ * @;


1.5
date	2011.01.19.17.26.15;	author dmfrank;	state -;
branches;
next	1.4;

1.4
date	2011.01.18.14.40.34;	author dmfrank;	state -;
branches;
next	1.3;

1.3
date	2011.01.18.13.41.45;	author dmfrank;	state -;
branches;
next	1.2;

1.2
date	2010.12.16.06.35.25;	author dmfrank;	state -;
branches;
next	1.1;

1.1
date	2010.12.16.06.28.54;	author dmfrank;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@/* $Id: commands.h,v 1.5 2011-01-19 00:56:11-08 dmfrank - $
 * Derek Frank, dmfrank@@ucsc.edu
 *
 * commands
 */

#ifndef __COMMANDS_H__
#define __COMMANDS_H__

#include <map>

using namespace std;

#include "inode.h"
#include "trace.h"
#include "util.h"

//
// A couple of convenient typedefs to avoid verbosity.
//

typedef void (*function) (inode_state &state, const wordvec &words);
typedef map<string, function> commandmap;

//
// commands -
//    A class to hold and dispatch each of the command functions.
//    Each command "foo" is interpreted by a function fn_foo.
// ctor -
//    The default ctor initializes the map.
// operator[] -
//    Given a string, returns a function associated with it,
//    or 0 if not found.
//

class commands {
   private:
      commands (const inode &); // disable copy ctor
      commands &operator= (const inode &); // disable operator=
      commandmap map;
   public:
      commands();
      function operator[] (const string &cmd);
      static string prompt;
};

//
// execution functions -
//    See the man page for a description of each of these functions.
//

void fn_cat    (inode_state &state, const wordvec &words);
void fn_cd     (inode_state &state, const wordvec &words);
void fn_echo   (inode_state &state, const wordvec &words);
void fn_exit   (inode_state &state, const wordvec &words);
void fn_ls     (inode_state &state, const wordvec &words);
void fn_lsr    (inode_state &state, const wordvec &words);
void fn_make   (inode_state &state, const wordvec &words);
void fn_mkdir  (inode_state &state, const wordvec &words);
void fn_prompt (inode_state &state, const wordvec &words);
void fn_pwd    (inode_state &state, const wordvec &words);
void fn_rm     (inode_state &state, const wordvec &words);
void fn_rmr    (inode_state &state, const wordvec &words);

//
// exit_status_message -
//    Prints an exit message and returns the exit status, as recorded
//    by any of the functions.
//

int exit_status_message();
class ysh_exit_exn: public exception {};

#endif

@


1.4
log
@-
@
text
@d1 1
a1 1
/* $Id: commands.h,v 1.2 2011-01-17 14:46:04-08 dmfrank - $
d44 1
@


1.3
log
@-
@
text
@d2 1
a2 1
 * Derek Frank, dmfrak@@ucsc.edu
d4 1
a4 1
 * commands â€” 
@


1.2
log
@-
@
text
@d1 5
a5 2
// $Id: commands.h,v 1.1 2010-12-15 22:28:54-08 dmfrank - $
// Derek Frank, dmfrak@@ucsc.edu
@


1.1
log
@-
@
text
@d1 2
a2 1
// $Id: commands.h,v 1.2 2010-12-13 20:11:09-08 - - $
@
