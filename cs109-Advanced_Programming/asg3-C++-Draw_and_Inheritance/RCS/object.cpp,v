head	1.10;
access;
symbols;
locks;
comment	@// @;


1.10
date	2011.02.15.06.03.59;	author dmfrank;	state -;
branches;
next	1.9;

1.9
date	2011.02.15.05.06.59;	author dmfrank;	state -;
branches;
next	1.8;

1.8
date	2011.02.15.04.50.36;	author dmfrank;	state -;
branches;
next	1.7;

1.7
date	2011.02.14.23.17.26;	author dmfrank;	state -;
branches;
next	1.6;

1.6
date	2011.02.14.23.13.33;	author dmfrank;	state -;
branches;
next	1.5;

1.5
date	2011.02.14.21.59.27;	author dmfrank;	state -;
branches;
next	1.4;

1.4
date	2011.02.14.08.25.25;	author dmfrank;	state -;
branches;
next	1.3;

1.3
date	2011.02.11.15.58.15;	author dmfrank;	state -;
branches;
next	1.2;

1.2
date	2011.02.02.16.39.52;	author dmfrank;	state -;
branches;
next	1.1;

1.1
date	2011.02.02.16.09.49;	author dmfrank;	state -;
branches;
next	;


desc
@@


1.10
log
@-
@
text
@/* $Id: object.cpp,v 1.27 2011-02-14 21:29:55-08 dmfrank - $
 * Derek Frank, dmfrank@@ucsc.edu
 *
 * NAME
 *    object - implementation file
 *
 * DESCRIPTION
 *    Implementation of the object class and various classes that
 *    inherit from the object class.
 */

#include <typeinfo>

using namespace std;

#include "object.h"
#include "util.h"

#define WHOAMI \
        "[" << typeid(*this).name() << "@@" << (void *) this << "]"

#define CTRACE(ARGS) \
        TRACE ('c', WHOAMI << " " << ARGS)

#define DTRACE(ARGS) \
        TRACE ('d', WHOAMI << " coords=" << coords \
               << " angle=" << angle << endl << ARGS);

//
// dtor - object
//    Destructor inherited by all object based classes.
//
object::~object () {
   CTRACE ("delete");
}

//
// ctor - text
//    Constructor for the text class.
//
text::text (const string &font, const points &size, const string &data):
      fontname(font), fontsize(size), textdata(data) {
   CTRACE ("font=" << fontname << " size=" << fontsize
           << " \"" << textdata << "\"")
}

//
// ctor - ellipse
//    Constructor for the ellipse class.
//
ellipse::ellipse (const inches &initheight, const inches &initwidth,
                  const points &initthick):
      shape(initthick), height(initheight), width(initwidth) {
   CTRACE ("height=" << height << " width=" << width
           << " thick=" << thick);
}

//
// ctor - circle
//    Constructor for the circle class.
//
circle::circle (const inches &diameter, const points &thick):
      ellipse (diameter, diameter, thick) {
}

//
// ctor - polygon
//    Constructor for the polygon class.
//
polygon::polygon (const coordlist &coords, const points &initthick):
      shape(initthick), coordinates(coords) {
   CTRACE ( "thick=" << thick << " coords=" << endl
            << coordinates);
}

//
// ctor - rectangle
//    Constructor for the rectangle class.
//
rectangle::rectangle (const inches &height, const inches &width,
                      const points &initthick):
      polygon (make_list (height, width), initthick) {
}

//
// ctor - square
//    Constructor for the square class.
//
square::square (const inches &width, const points &thick):
      rectangle (width, width, thick) {
}

//
// ctor - line
//    Constructor for the line class.
//
line::line (const inches &length, const points &initthick):
      polygon (make_list (length), initthick) {
      
}

//
// draw - text
//    Function to draw text.
//
void text::draw (ostream &out, const xycoords &coords,
                const degrees &angle) {
   DTRACE ("font=" << fontname << " size=" << fontsize
           << " \"" << textdata << "\"");

   string indent = "   ";

   out << "gsave" << endl
       << indent << "/" << fontname << " findfont" << endl
       << indent << double (fontsize) << " scalefont setfont" << endl
       << indent << double (coords.first) << " "
                 << double (coords.second) << " translate" << endl
       << indent << double (angle) << " rotate" << endl
       << indent << "0 0 moveto" << endl
       << indent << "(" << textdata << ")" << endl
       << indent << "show" << endl
       << "grestore" << endl;
}

//
// draw - ellipse
//    Function to draw an ellipse.
//
void ellipse::draw (ostream &out, const xycoords &coords,
                const degrees &angle) {
   DTRACE ("height=" << height << " width=" << width
           << " thick=" << thick);

   string indent = "   ";
   double xscale, yscale, radius;
   if ( double (height) < double (width)) {
      xscale = 1;
      yscale = double (height) / double (width);
      radius = double (width) / 2;
   } else {
      xscale = double (width) / double (width);
      yscale = 1;
      radius = double (height) / 2;
   }
   
   out << "gsave" << endl
       << indent << "newpath" << endl
       << indent << "/save matrix currentmatrix def" << endl
       << indent << double (coords.first) << " "
                 << double (coords.second) << " translate" << endl
       << indent << double (angle) << " rotate" << endl
       << indent << xscale << " "  << yscale  << " scale" << endl
       << indent << "0 0 " << radius << " 0 360 arc" << endl
       << indent << "save setmatrix" << endl
       << indent << double (thick) << " setlinewidth" << endl
       << indent << "stroke" << endl
       << "grestore" << endl;
}

//
// draw - polygon
//    Function to draw a polygon.
//
void polygon::draw (ostream &out, const xycoords &coords,
                const degrees &angle) {
   DTRACE ( "thick=" << thick << " coords=" << endl
            << coordinates);

   string indent = "   ";

   out << "gsave" << endl
       << indent << "newpath" << endl
       << indent << double (coords.first) << " "
                 << double (coords.second) << " translate" << endl
       << indent << double (angle) << " rotate" << endl
       << indent << "0 0 moveto" << endl;

   coordlist::const_iterator itor = coordinates.begin ();
   for (; itor != coordinates.end (); ++itor) {
      out << indent << double (itor->second) << " "
                    << double (itor->first) << " rlineto" << endl;
   }

   out << indent << "closepath" << endl
       << indent << double (thick) << " setlinewidth" << endl
       << indent << "stroke" << endl
       << "grestore" << endl;
      
}

//
// make_list - rectangle
//    Function returns a list of xycoords.  A rectangle has three
//    coordinates to be put into a list.  The first position is assumed
//    to be (0,0) and is specified at the time the draw command is
//    issued.
//
coordlist rectangle::make_list (
            const inches &height, const inches &width) {
   coordlist coordlist;
   inches nheight (-(double(height)/PTS_PER_INCH));
   coordlist.push_back (xycoords (height, inches (0)));
   coordlist.push_back (xycoords (inches (0),width));
   coordlist.push_back (xycoords (nheight, inches (0)));
   return coordlist;
}

//
// make_list - line
//    Function returns a list of xycoords.  A line is drawn horizontally
//    to the right and has one point after the assumed (0,0).
//
coordlist line::make_list (const inches &length) {
   coordlist coordlist;
   coordlist.push_back (xycoords (inches (0), length));
   return coordlist;
}

@


1.9
log
@-
@
text
@d1 1
a1 1
/* $Id: object.cpp,v 1.26 2011-02-14 20:43:27-08 dmfrank - $
d122 1
a122 1
       << "grestore" << endl << endl;
d157 1
a157 1
       << "grestore" << endl << endl;
d187 1
a187 1
       << "grestore" << endl << endl;
@


1.8
log
@-
@
text
@d180 2
a181 2
      out << indent << double (itor->first) << " "
                    << double (itor->second) << " rlineto" << endl;
d185 1
a185 1
       << indent << thick << " setlinewidth" << endl
@


1.7
log
@-
@
text
@d1 1
a1 1
/* $Id: object.cpp,v 1.22 2011-02-14 15:16:12-08 dmfrank - $
a111 8
   string::iterator itor = textdata.begin ();
   string::iterator end = textdata.end ();
   for (; itor != end; ++itor) {
      if (*itor == '\\' || *itor == '(' || *itor == ')') {
         itor = textdata.insert (itor, '\\');
         ++itor;
      }
   }
d115 4
a118 4
       << indent << double(fontsize) << " scalefont setfont" << endl
       << indent << double(coords.first) << " "
       << double(coords.second) << " translate" << endl
       << indent << double(angle) << " rotate" << endl
d134 24
a157 1
   (void) out;   
a165 1
   (void) out;
d168 21
@


1.6
log
@-
@
text
@d1 1
a1 1
/* $Id: object.cpp,v 1.21 2011-02-14 15:12:55-08 dmfrank - $
a118 1
      if (itor == end) break;
@


1.5
log
@-
@
text
@d1 1
a1 1
/* $Id: object.cpp,v 1.10 2011-02-14 13:53:34-08 dmfrank - $
d114 1
a114 1
/*   for (; itor != end; ++itor) {
d119 1
d121 1
a121 1
*/ 
d123 7
a129 7
       << indent << fontname << " find font" << endl
       << indent << fontsize << " scalefont setfont" << endl
       << indent << coords.first << " " << coords.second
       << "translate" << endl
       << indent << angle << "rotate" << endl
       << indent << " 0 0 moveto" << endl
       << indent << textdata << endl
d131 1
a131 1
       << "grestore" << endl;
a139 1
   (void) out;
d142 2
d167 1
a167 1
   inches nheight (-(height/PTS_PER_INCH));
@


1.4
log
@-
@
text
@d1 1
a1 1
/* $Id: object.cpp,v 1.5 2011-02-13 22:52:16-08 dmfrank - $
a107 1
   (void) out;
d110 21
a130 2
   
   
d165 4
a168 3
   coordlist.push_back (xycoords (width, inches(0)));
   coordlist.push_back (xycoords (width, height));
   coordlist.push_back (xycoords (inches(0), height));
d179 1
a179 1
   coordlist.push_back (xycoords (inches(0), length));
@


1.3
log
@-
@
text
@d1 1
a1 1
/* $Id: object.cpp,v 1.2 2011-02-02 08:39:52-08 dmfrank - $
d3 7
d29 4
d37 4
d47 4
d58 4
d66 4
d76 4
d85 4
d93 4
d102 4
d108 1
a108 1
  (void) out;
d110 3
a112 1
           << " \"" << textdata << "\"")
d115 4
d121 1
a121 1
  (void) out;
d126 4
d132 1
d137 7
d147 3
d153 5
d160 1
@


1.2
log
@-
@
text
@d1 1
a1 1
/* $Id: interp.cpp,v 1.1 2011-02-02 08:09:48-08 dmfrank - $
d65 1
d72 1
@


1.1
log
@-
@
text
@d1 3
a3 1
// $Id: object.cc,v 1.1 2011-01-25 18:56:05-08 - - $
@
