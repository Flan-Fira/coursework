head	1.4;
access;
symbols;
locks;
comment	@ * @;


1.4
date	2011.02.15.06.47.07;	author dmfrank;	state -;
branches;
next	1.3;

1.3
date	2011.02.14.13.13.02;	author dmfrank;	state -;
branches;
next	1.2;

1.2
date	2011.02.02.16.39.52;	author dmfrank;	state -;
branches;
next	1.1;

1.1
date	2011.02.02.16.24.40;	author dmfrank;	state -;
branches;
next	;


desc
@@


1.4
log
@-
@
text
@/* $Id: object.h,v 1.5 2011-02-14 22:45:19-08 dmfrank - $
 * Derek Frank, dmfrank@@ucsc.edu
 *
 * NAME
 *    object - header file
 *
 * DESCRIPTION
 *    An inheritance hierarchy with base object.
 */

#ifndef __OBJECT_H__
#define __OBJECT_H__

#include <iomanip>
#include <iostream>
#include <list>
#include <utility>

using namespace std;

#include "numbers.h"

//
// Objects constitute a single-inheritance hierarchy, summarized
// here, with the superclass listed first, and subclasses indented
// under their immediate superclass.
//
// object
//    text
//    shape
//       ellipse
//          circle
//       polygon
//          rectangle
//             square
//          line
//

typedef list<xycoords> coordlist;

//
// Class object
//    Abstract base class for all shapes in this system.
//
class object {
   public:
      virtual ~object ();
      virtual void draw (ostream &, const xycoords &,
                         const degrees &angle) = 0;
   protected:
      object () {}
};


//
// Class text
//
class text: public object {
   public:
      text (const string &fontname, const points &fontsize,
            const string &textdata);
      virtual void draw (ostream &, const xycoords &,
                         const degrees &angle);
   protected:
      string fontname;
      points fontsize;
      string textdata;
};

//
// Class shape
//
class shape: public object {
   protected:
      shape (const points &thick): thick(thick) {}
      points thick;
   private:
      shape (); // Disable.
};

//
// Class ellipse
//
class ellipse: public shape {
   public:
      ellipse (const inches &height, const inches &width,
               const points &thick);
      virtual void draw (ostream &, const xycoords &,
                         const degrees &angle);
   protected:
      inches height;
      inches width;
};

//
// Class circle
//
class circle: public ellipse {
   public:
      circle (const inches &diameter, const points &thick);
};

//
// Class polygon
//
class polygon: public shape {
   public:
      polygon (const coordlist &coords, const points &thick);
      virtual void draw (ostream &, const xycoords &,
                         const degrees &angle);
   protected:
      const coordlist coordinates;
};

//
// Class rectangle
//
class rectangle: public polygon {
   public:
      rectangle (const inches &height, const inches &width,
                 const points &thick);
   private:
      static coordlist make_list (
             const inches &height, const inches &width);
};

//
// Class square
//
class square: public rectangle {
   public:
      square (const inches &width, const points &thick);
};

//
// Class line
//
class line: public polygon {
   public:
      line (const inches &length, const points &thick);
   private:
      static coordlist make_list (const inches &length);
};

#endif

@


1.3
log
@-
@
text
@d1 1
a1 1
/* $Id: object.h,v 1.4 2011-02-14 00:24:14-08 dmfrank - $
d8 1
a8 2
 *    Describes the class object and other various classes that
 *    inherit from object.
@


1.2
log
@-
@
text
@d1 1
a1 1
/* $Id: interp.cpp,v 1.1 2011-02-02 08:09:48-08 dmfrank - $
d3 7
d30 1
a30 1
//    test
d43 2
a44 1
// Abstract base class for all shapes in this system.
a45 1

d55 1
d57 1
a57 1
// Class for printing text.
a58 1

d72 1
a72 1
// Shape of a geometric object.
a73 1

d83 1
a83 1
// Classes for ellipse and circle.
a84 1

d96 3
d105 1
a105 1
// Class polygon.
a106 1

d117 1
a117 1
// Classes rectangle, square, and line..
a118 1

d128 3
d136 3
@


1.1
log
@-
@
text
@d1 3
a3 1
// $Id: object.h,v 1.1 2011-01-25 18:56:05-08 - - $
@
