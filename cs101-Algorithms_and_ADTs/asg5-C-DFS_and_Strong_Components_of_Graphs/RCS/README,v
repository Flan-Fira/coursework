head	1.3;
access;
symbols;
locks;
comment	@# @;


1.3
date	2010.11.23.02.38.21;	author dmfrank;	state -;
branches;
next	1.2;

1.2
date	2010.11.22.23.32.22;	author dmfrank;	state -;
branches;
next	1.1;

1.1
date	2010.11.22.21.18.09;	author dmfrank;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@$Id: README,v 1.2 2010-11-22 15:32:22-08 dmfrank - $
Derek Frank, dmfrank@@ucsc.edu

Assignment: pa5
	This assignment contains:
		List.c
		List.h
		ListTest.c
		Graph.c
		Graph.h
		GraphTest.c
		FindComponents.c
		Makefile
		README

 ******************************************************************************/

	List.c:
		A linked list for integers with markers to keep track of the
	front and rear of the double ended queue.  Includes a current-position
	marker that can move between previous and next positions.
	
	List.h:
		A header file for List.c.

	ListTest.c:
		A class made specifically to run and test List.c to see how it
	functions.
  
	Graph.c:
		Implementation file for the Graph ADT.  Contains a Dirrected
	Graph on n vertices.  Uses the List ADT to keep track of adjacent
	vertices.  Includes a Depth First Search algorithm used to find the
	strongly connected components of a Directed Graph.

	Graph.h:
		A header file for Graph.c.

	GraphTest.c
		A class made specifically to run and test Graph.c to see how
	it functions.

	FindComponents.c:
		Program "FindComponents" main.  Implements the Graph and List
	ADTs. Reads from a specified file a directed graph and uses the Depth
	First Search algorithm to to find the strongly connected components in
	the given graph.  Prints output to a specified outfile.

	Makefile:
		Used to compile all c files for this assignment on Unix.
@


1.2
log
@-
@
text
@d1 1
a1 1
$Id: README,v 1.3 2010-11-22 15:28:00-08 dmfrank - $
d27 2
a28 2
		A class made specifically to run and test List.c
	to see how it functions.
d40 2
a41 2
		A class made specifically to run and test
	Graph.c to see how it functions.
d50 1
a50 2
		Used to compile all c files for this assignment
	on Unix.
@


1.1
log
@-
@
text
@d1 1
a1 1
$Id: README,v 1.2 2010-11-21 23:56:10-08 dmfrank - $
d15 3
a17 1
 ******************************************************************************/		
d31 4
a34 3
		Implementation file for the Graph ADT.  Contains a Graph on n
	vertices.  Uses the List ADT to keep track of adjacent vertices.
	Includes a Depth First Search algorithm.
d44 4
a47 8
		The main class of the program FindPath that implements both the
	Graph and List ADTs.  First reads an input file containing a graph on n
	vertices with specified edges.  It then prints the graph's adjacency
	list.  Next it goes on a loop to read in a source and destination from
	the input file, then uses the Breadth First Search algorithm to make a
	tree of shortest paths given the source from the input file and prints
	out the distance and shortest path from the source to the given
	destination.
@
