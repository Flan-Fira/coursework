head	1.3;
access;
symbols;
locks;
comment	@ * @;


1.3
date	2010.11.23.00.31.39;	author dmfrank;	state -;
branches;
next	1.2;

1.2
date	2010.11.22.23.42.30;	author dmfrank;	state -;
branches;
next	1.1;

1.1
date	2010.11.22.21.18.09;	author dmfrank;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@/*******************************************************************************
 *  $Id: GraphTest.c,v 1.2 2010-11-22 15:42:13-08 dmfrank - $
 *	Derek Frank, dmfrank@@ucsc.edu
 *	
 *	NAME
 *	  GraphTest.c
 *  
 *	DESCRIPTION
 *	  A class to run and test the Graph.c ADT.
 ******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include "Graph.h"

/* Print to file the stack list of strongly connected components */
void printCC(FILE* out, GraphRef G, ListRef S){
	fprintf(out,"\n");
	fprintf(out, "Stack of G's %d strongly connected components:\n", getCC(G));
	printList(out, S);
	fprintf(out,"\n");
}

int main (int argc, char * argv[]) {
	FILE *out;
	
	/* check command line for correct number of arguments */
	if( argc != 2 ) {
		printf("Usage: %s outfile\n", argv[0]);
		exit(1);
	}
	
	/* open file for writing */
	out = fopen(argv[1], "w");
	if( out==NULL ) {
		printf("Unable to open file %s for writing\n", argv[1]);
		exit(1);
	}
	
	/* Create graph on n vertices */
	int n = 8;
	GraphRef G = newGraph(n);
	ListRef L = newList();
	
	/* Initialize stack list to length n */
	int i;
	for ( i = 1; i <= getOrder(G); ++i ) {
		insertAfterBack(L, i);
	}
	
	/* Add directed edges to graph and print */
	addArc(G, 1, 2);
	addArc(G, 2, 3);
	addArc(G, 2, 5);
	addArc(G, 2, 6);
	addArc(G, 3, 4);
	addArc(G, 3, 7);
	addArc(G, 4, 3);
	addArc(G, 4, 8);
	addArc(G, 5, 1);
	addArc(G, 5, 6);
	addArc(G, 6, 7);
	addArc(G, 7, 6);
	addArc(G, 7, 8);
	addArc(G, 8, 8);
	printGraph(out, G);
	
	/* Test and print DFS(), transpose(), and copyGraph() */
	DFS(G, L);
	fprintf(out, "\nCopy:\n");
	GraphRef C = copyGraph(G);
	printGraph(out, C);
	fprintf(out, "\nTranspose:\n");
	GraphRef T = transpose(G);
	printGraph(out, T);
	DFS(T, L);
	
	/* Print the stack list of strongly connected components */
	printCC(out, T, L);
	
	/* Free memory */
	freeList(&L);
	freeGraph(&G);
	freeGraph(&C);
	freeGraph(&T);
	
	/* close files */
	fclose(out);
	
	return 0;
}
@


1.2
log
@-
@
text
@a69 1
	/*fprintf(out, "SCC: %d\n", getCC(G));*/
@


1.1
log
@-
@
text
@d2 1
a2 1
 *  $Id: GraphTest.c,v 1.1 2010-11-21 22:13:58-08 dmfrank - $
d16 2
a17 1
void printPath(FILE* out, GraphRef G, ListRef path, int dest){
d19 2
a20 9
	fprintf(out, "The distance from %d to %d is ", getSource(G), dest);
	if ( getFront(path) == NIL ) {
		fprintf(out, "infinity\n");
		fprintf(out, "No %d-%d path exists", getSource(G), dest);
	}else {
		fprintf(out, "%d\n", getDist(G, dest));
		fprintf(out, "A shortest %d-%d path is: ", getSource(G), dest);
		printList(out, path);
	}
d40 2
a41 2
	int n = 7;
	int dest;
d43 1
a43 1
	ListRef path = newList();
d45 5
a49 7
	addEdge(G, 1, 4);
	addEdge(G, 1, 5);
	addEdge(G, 4, 5);
	addEdge(G, 2, 3);
	addEdge(G, 2, 6);
	addEdge(G, 3, 7);
	addEdge(G, 6, 7);
d51 15
d68 13
a80 17
	BFS(G, 2);
	dest = 7;
	getPath(path, G, dest);
	printPath(out, G, path, dest);
	
	
	BFS(G, 3);
	makeEmpty(path);
	dest = 6;
	getPath(path, G, dest);
	printPath(out, G, path, dest);
	
	BFS(G, 1);
	makeEmpty(path);
	dest = 7;
	getPath(path, G, dest);
	printPath(out, G, path, dest);
d82 2
a83 1
	freeList(&path);
d85 2
@
