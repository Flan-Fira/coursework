head	1.5;
access;
symbols;
locks;
comment	@ * @;


1.5
date	2010.11.15.03.42.28;	author dmfrank;	state -;
branches;
next	1.4;

1.4
date	2010.11.15.03.31.57;	author dmfrank;	state -;
branches;
next	1.3;

1.3
date	2010.11.15.02.10.35;	author dmfrank;	state -;
branches;
next	1.2;

1.2
date	2010.11.15.00.28.48;	author dmfrank;	state -;
branches;
next	1.1;

1.1
date	2010.11.14.23.34.14;	author dmfrank;	state -;
branches;
next	;


desc
@@


1.5
log
@-
@
text
@/*******************************************************************************
 *  $Id: GraphTest.c,v 1.8 2010-11-14 19:31:28-08 dmfrank - $
 *	Derek Frank, dmfrank@@ucsc.edu
 *	
 *	NAME
 *	  GraphTest.c
 *  
 *	DESCRIPTION
 *	  A class to run and test the Graph.c ADT.
 ******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include "Graph.h"

void printPath(FILE* out, GraphRef G, ListRef path, int dest){
	fprintf(out,"\n");
	fprintf(out, "The distance from %d to %d is ", getSource(G), dest);
	if ( getFront(path) == NIL ) {
		fprintf(out, "infinity\n");
		fprintf(out, "No %d-%d path exists", getSource(G), dest);
	}else {
		fprintf(out, "%d\n", getDist(G, dest));
		fprintf(out, "A shortest %d-%d path is: ", getSource(G), dest);
		printList(out, path);
	}
	fprintf(out,"\n");
}

int main (int argc, char * argv[]) {
	FILE *out;
	
	/* check command line for correct number of arguments */
	if( argc != 2 ) {
		printf("Usage: %s outfile\n", argv[0]);
		exit(1);
	}
	
	/* open file for writing */
	out = fopen(argv[1], "w");
	if( out==NULL ) {
		printf("Unable to open file %s for writing\n", argv[1]);
		exit(1);
	}
	
	int n = 7;
	int dest;
	GraphRef G = newGraph(n);
	ListRef path = newList();
	
	addEdge(G, 1, 4);
	addEdge(G, 1, 5);
	addEdge(G, 4, 5);
	addEdge(G, 2, 3);
	addEdge(G, 2, 6);
	addEdge(G, 3, 7);
	addEdge(G, 6, 7);
	
	printGraph(out, G);
	
	BFS(G, 2);
	dest = 7;
	getPath(path, G, dest);
	printPath(out, G, path, dest);
	
	
	BFS(G, 3);
	makeEmpty(path);
	dest = 6;
	getPath(path, G, dest);
	printPath(out, G, path, dest);
	
	BFS(G, 1);
	makeEmpty(path);
	dest = 7;
	getPath(path, G, dest);
	printPath(out, G, path, dest);
	
	freeList(&path);
	freeGraph(&G);
	
	/* close files */
	fclose(out);
	
	return 0;
}
@


1.4
log
@-
@
text
@d34 1
a34 1
	if( argc != 2 ){
d41 1
a41 1
	if( out==NULL ){
@


1.3
log
@-
@
text
@d2 1
a2 1
 *  $Id: GraphTest.c,v 1.7 2010-11-14 18:00:46-08 dmfrank - $
d42 1
a42 1
		printf("Unable to open file %s for writing\n", argv[2]);
@


1.2
log
@-
@
text
@d2 1
a2 1
 *  $Id: GraphTest.c,v 1.5 2010-11-14 14:30:10-08 dmfrank - $
d31 1
a31 1
	FILE *in, *out;
d80 2
a81 1
	freeGraph(&G);	
a82 1
	fclose(in);
@


1.1
log
@-
@
text
@d2 1
a2 1
 *  $Id: GraphTest.c,v 1.4 2010-11-14 12:25:53-08 dmfrank - $
d16 14
d34 2
a35 2
	if( argc != 3 ){
		printf("Usage: %s infile outfile\n", argv[0]);
d39 2
a40 7
	/* open files for reading and writing */
	in = fopen(argv[1], "r");
	out = fopen(argv[2], "w");
	if( in==NULL ){
		printf("Unable to open file %s for reading\n", argv[1]);
		exit(1);
	}
d46 2
a47 1
	int n = 5;
d49 9
d61 17
a77 1
	freeGraph(&G);
d79 2
@
